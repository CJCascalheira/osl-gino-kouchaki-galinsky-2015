9*7
36*3
36*2
12*6
12*9
6*18
70-3
70-6
70-9
.99^100
.99^99
(.99^99)*.01
(.99^98)
.37*.01*.01
.99^.99
.99^99
.99^98
.99^97
.99^95
.98^100
50*99
(4950)*(.99^98)*(.01^2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/osl-gino-kouchaki-galinsky-2015/src")
library(tidyverse) # utility
library(psych) # cronbach's alpha
gino <- read_csv("../data/Gino Kouchaki Galinsky 2015 Experiment 3.csv")
glimpse(gino)
gino_clean <- gino %>%
filter(FAILED_MC == 0) %>%
select(-c(instr, filter, CONDITION, FAILED_MC, MCheck, age, male),
-ends_with("Dummy")) %>%
rename(condition = condition_string)
gino_clean <- within(gino_clean, {
condition <- factor(condition)
})
(gino_means <- gino_clean %>%
mutate(
feelings_of_impurity = select(gino_clean, starts_with("impurity")) %>% rowMeans(),
feelings_of_discomfort = select(gino_clean, starts_with("dissonance")) %>% rowMeans(),
negative_affect = select(gino_clean, starts_with("neg")) %>% rowMeans(),
positive_affect = select(gino_clean, starts_with("pos")) %>% rowMeans(),
embarrassment = select(gino_clean, embarrassed, ashamed) %>% rowMeans(),
self_alienation = select(gino_clean, starts_with("alien")) %>% rowMeans()
) %>%
select(condition, feelings_of_impurity, feelings_of_discomfort, negative_affect,
positive_affect, embarrassment, self_alienation, decided_to_help))
# Cronbach's alpha for feelings of impurity
gino_clean %>%
select(starts_with("impurity")) %>%
psych::alpha()
# Cronbach's alpha for feelings of discomfort
gino_clean %>%
select(starts_with("dissonance")) %>%
psych::alpha()
# Cronbach's alpha for negative affect
gino_clean %>%
select(starts_with("neg")) %>%
psych::alpha()
# Cronbach's alpha for positive affect
gino_clean %>%
select(starts_with("pos")) %>%
psych::alpha()
# Cronbach's alpha for embarrassment
gino_clean %>%
select(embarrassed, ashamed) %>%
psych::alpha()
# Cronbach's alpha for self-alienation
gino_clean %>%
select(starts_with("alien")) %>%
psych::alpha()
gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
)
gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
)
(gino_summary <- gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
))
(gino_summary <- gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
))
within(gino_summary, {
item <- factor(item,
levels = c("self_alienation", "feelings_of_impurity", "discomfort",
"negative_affect", "positive_affect", "embarrassment"),
labels = c("Self-alienation", "Feelings of impurity", "Discomfort",
"Negative affect", "Positive affect", "Embarrassment"))
})
(gino_summary <- gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
))
item <- factor(item,
levels = c("self_alienation", "feelings_of_impurity", "feelings_of_discomfort",
"negative_affect", "positive_affect", "embarrassment"),
labels = c("Self-alienation", "Feelings of impurity", "Discomfort",
"Negative affect", "Positive affect", "Embarrassment"))
(gino_summary <- gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
))
within(gino_summary, {
item <- factor(item,
levels = c("self_alienation", "feelings_of_impurity", "feelings_of_discomfort",
"negative_affect", "positive_affect", "embarrassment"),
labels = c("Self-alienation", "Feelings of impurity", "Discomfort",
"Negative affect", "Positive affect", "Embarrassment"))
})
?xtable
??xtable
# Factorize item and add labels
(gino_summary <- within(gino_summary, {
item <- factor(item,
levels = c("self_alienation", "feelings_of_impurity", "feelings_of_discomfort",
"negative_affect", "positive_affect", "embarrassment"),
labels = c("Self-alienation", "Feelings of impurity", "Discomfort",
"Negative affect", "Positive affect", "Embarrassment"))
}))
# Drop confidence interval information
(gino_summary_short <- gino_summary %>%
select(condition, item, mean, sd))
(gino_summary_short <- gino_summary_short %>%
rename(
Variable = item,
M = mean,
SD = sd
))
# Separate by condition
gino_summary_short %>%
filter(condition == "failure")
# Separate by condition
gino_summary_short %>%
filter(condition == "inauthenticity")
gino_summary_short %>%
filter(condition == "failure")
gino_summary_short %>%
filter(condition == "failure") %>%
select(M, SD)
gino_summary_short %>%
filter(condition == "failure") %>%
select(M, SD)
gino_summary_short %>%
filter(condition == "failure") %>%
ungroup() %>%
select(M, SD)
gino_summary_short %>%
filter(condition == "control") %>%
ungroup() %>%
select(M, SD)
gino_summary_short %>%
filter(condition == "neutral") %>%
ungroup() %>%
select(M, SD)
# Separate by condition
gino_summary_short %>%
filter(condition == "inauthenticity")
# Separate by condition
gino_summary_short %>%
filter(condition == "inauthenticity") %>%
ungroup() %>%
select(Variable, M, SD)
gino_summary_short %>%
filter(condition == "failure") %>%
ungroup() %>%
arrange(Variable)
# Drop confidence interval information
(gino_summary_short <- gino_summary %>%
select(condition, item, mean, sd))
# Rename columns
(gino_summary_short <- gino_summary_short %>%
rename(
Variable = item,
M = mean,
SD = sd
) %>%
arrange(item))
# Drop confidence interval information
(gino_summary_short <- gino_summary %>%
select(condition, item, mean, sd))
# Rename columns
(gino_summary_short <- gino_summary_short %>%
rename(
Variable = item,
M = mean,
SD = sd
) %>%
arrange(item))
# Drop confidence interval information
(gino_summary_short <- gino_summary %>%
select(condition, item, mean, sd))
# Rename columns
(gino_summary_short <- gino_summary_short %>%
rename(
Variable = item,
M = mean,
SD = sd
) %>%
arrange(Variable))
# Separate by condition
gino_summary_short %>%
filter(condition == "inauthenticity") %>%
ungroup() %>%
select(Variable, M, SD)
gino_summary_short %>%
filter(condition == "failure") %>%
ungroup() %>%
select(M, SD)
gino_summary_short %>%
filter(condition == "neutral") %>%
ungroup() %>%
select(M, SD)
failure <- gino_summary_short %>%
filter(condition == "failure") %>%
ungroup() %>%
select(M, SD)
condition <- gino_summary_short %>%
filter(condition == "neutral") %>%
ungroup() %>%
select(M, SD)
bind_cols(failure, condition)
# Separate by condition
(gino_table <- gino_summary_short %>%
filter(condition == "inauthenticity") %>%
ungroup() %>%
select(Variable, M, SD))
bind_cols(gino_table, failure, condition)
# Prepare table format
bind_cols(gino_table, failure, condition)
# Prepare table format
(clean_table <- bind_cols(gino_table, failure, condition))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/osl-gino-kouchaki-galinsky-2015/src")
library(tidyverse) # utility
library(psych) # cronbach's alpha
library(knitr) # create tables
library(kableExtra) # style tables
gino <- read_csv("../data/Gino Kouchaki Galinsky 2015 Experiment 3.csv")
glimpse(gino)
gino_clean <- gino %>%
filter(FAILED_MC == 0) %>%
select(-c(instr, filter, CONDITION, FAILED_MC, MCheck, age, male),
-ends_with("Dummy")) %>%
rename(condition = condition_string)
gino_clean <- within(gino_clean, {
condition <- factor(condition)
})
(gino_means <- gino_clean %>%
mutate(
feelings_of_impurity = select(gino_clean, starts_with("impurity")) %>% rowMeans(),
feelings_of_discomfort = select(gino_clean, starts_with("dissonance")) %>% rowMeans(),
negative_affect = select(gino_clean, starts_with("neg")) %>% rowMeans(),
positive_affect = select(gino_clean, starts_with("pos")) %>% rowMeans(),
embarrassment = select(gino_clean, embarrassed, ashamed) %>% rowMeans(),
self_alienation = select(gino_clean, starts_with("alien")) %>% rowMeans()
) %>%
select(condition, feelings_of_impurity, feelings_of_discomfort, negative_affect,
positive_affect, embarrassment, self_alienation, decided_to_help))
# Cronbach's alpha for feelings of impurity
gino_clean %>%
select(starts_with("impurity")) %>%
psych::alpha()
# Cronbach's alpha for feelings of discomfort
gino_clean %>%
select(starts_with("dissonance")) %>%
psych::alpha()
# Cronbach's alpha for negative affect
gino_clean %>%
select(starts_with("neg")) %>%
psych::alpha()
# Cronbach's alpha for positive affect
gino_clean %>%
select(starts_with("pos")) %>%
psych::alpha()
# Cronbach's alpha for embarrassment
gino_clean %>%
select(embarrassed, ashamed) %>%
psych::alpha()
# Cronbach's alpha for self-alienation
gino_clean %>%
select(starts_with("alien")) %>%
psych::alpha()
(gino_summary <- gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
))
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_as_image()
# Factorize item and add labels
(gino_summary <- within(gino_summary, {
item <- factor(item,
levels = c("self_alienation", "feelings_of_impurity", "feelings_of_discomfort",
"negative_affect", "positive_affect", "embarrassment"),
labels = c("Self-alienation", "Feelings of impurity", "Discomfort",
"Negative affect", "Positive affect", "Embarrassment"))
}))
# Drop confidence interval information
(gino_summary_short <- gino_summary %>%
select(condition, item, mean, sd))
# Rename columns
(gino_summary_short <- gino_summary_short %>%
rename(
Variable = item,
M = mean,
SD = sd
) %>%
arrange(Variable))
# Separate by condition
(gino_table <- gino_summary_short %>%
filter(condition == "inauthenticity") %>%
ungroup() %>%
select(Variable, M, SD))
failure <- gino_summary_short %>%
filter(condition == "failure") %>%
ungroup() %>%
select(M, SD)
condition <- gino_summary_short %>%
filter(condition == "neutral") %>%
ungroup() %>%
select(M, SD)
# Prepare table format
(clean_table <- bind_cols(gino_table, failure, condition))
# Construct table
kable(clean_table)
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_as_image()
?kable_as_image
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "\\textis{M}", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_as_image(filename = )
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "\\textit{M}", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_as_image(filename = )
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_as_image(filename = )
getwd()
# Set working directory
setwd("~/GitHub/osl-gino-kouchaki-galinsky-2015/src")
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_as_image(filename = "../data/results/apa_table")
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_styling(background = "white") %>%
kable_as_image(filename = "../data/results/apa_table")
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
row_spec(1:nrow(clean_table), background = "white") %>%
kable_as_image(filename = "../data/results/apa_table")
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
column_spec(1:ncol(clean_table), background = "white") %>%
kable_as_image(filename = "../data/results/apa_table")
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
column_spec(1:ncol(clean_table), background = "white", include_thead = TRUE) %>%
kable_as_image(filename = "../data/results/apa_table")
kable(clean_table, "latex", booktabs = TRUE, digits = 2, align = "lcccccc",
col.names = c("Variable", "M", "SD", "M", "SD", "M", "SD")) %>%
add_header_above(header = c(" ", "Inauthenticity" = 2, "Failure" = 2, "Control" = 2)) %>%
kable_as_image(filename = "../data/results/apa_table")
(gino_summary <- within(gino_summary, {
item <- factor(item,
levels = c("self_alienation", "feelings_of_impurity", "feelings_of_discomfort",
"negative_affect", "positive_affect", "embarrassment"),
labels = c("Self-alienation", "Feelings of impurity", "Discomfort",
"Negative affect", "Positive affect", "Embarrassment"))
}))
# Drop confidence interval information
(gino_summary_short <- gino_summary %>%
select(condition, item, mean, sd))
# Rename columns
(gino_summary_short <- gino_summary_short %>%
rename(
Variable = item,
M = mean,
SD = sd
) %>%
arrange(Variable))
(gino_summary <- gino_means %>%
select(-decided_to_help) %>%
gather(key = item, value = score, -condition) %>%
group_by(condition, item) %>%
summarize(
mean = mean(score),
sd = sd(score),
n = n(),
t_star = qt(p = 0.975, df = n - 1),
upper = mean + (t_star * (sd/sqrt(n))),
lower = mean - (t_star * (sd/sqrt(n)))
))
(gino_summary <- within(gino_summary, {
item <- factor(item,
levels = c("self_alienation", "feelings_of_impurity", "feelings_of_discomfort",
"negative_affect", "positive_affect", "embarrassment"),
labels = c("Self-alienation", "Feelings of impurity", "Discomfort",
"Negative affect", "Positive affect", "Embarrassment"))
}))
# Drop confidence interval information
(gino_summary_short <- gino_summary %>%
select(condition, item, mean, sd))
# Rename columns
(gino_summary_short <- gino_summary_short %>%
rename(
Variable = item,
M = mean,
SD = sd
) %>%
arrange(Variable))
# Separate by condition
(gino_table <- gino_summary_short %>%
filter(condition == "inauthenticity") %>%
ungroup() %>%
select(Variable, M, SD))
failure <- gino_summary_short %>%
filter(condition == "failure") %>%
ungroup() %>%
select(M, SD)
condition <- gino_summary_short %>%
filter(condition == "neutral") %>%
ungroup() %>%
select(M, SD)
# Prepare table format
(clean_table <- bind_cols(gino_table, failure, condition))
gino_clean
gino_means
aov(feelings_of_impurity ~ condition, data = gino_means)
summary(aov(feelings_of_impurity ~ condition, data = gino_means))
library(lme4)
# Feelings of Impurity
lme(feelings_of_impurity ~ condition, data = gino_means)
library(nlme)
# Feelings of Impurity
lme(feelings_of_impurity ~ condition, data = gino_means)
# Feelings of Impurity
lme(feelings_of_impurity ~ condition, random = ~1, data = gino_means)
# Feelings of Impurity
lme(feelings_of_impurity ~ condition, data = gino_means)
